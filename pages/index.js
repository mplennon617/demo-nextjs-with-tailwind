import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";

// This is our Home component.
// In Next.js, this is our main page (http://localhost:3000)
export default function Home() {
  // Declare our state variables:
  // - The `posts` state variable will be populated with the data from the API.
  // - The `body` and `author` state variables are set to whatever the user enters in the text boxes.
  // - The `error` state variable is a boolean flag that we set to true if anything goes wrong.
  const [posts, setPosts] = useState([]);
  const [body, setBody] = useState("");
  const [author, setAuthor] = useState("");
  const [error, setError] = useState(false);

  // handleLoad function. Called from the useEffect().
  // Note: fetch(...) is an async function, which means we must make handleLoad async as well.
  const handleLoad = async () => {
    // Send a GET request to the server API to fetch all the post data.
    try {
      const res = await fetch("/api/posts", {
        method: "GET",
      });
      console.log(res);
      // If the HTTP response is successful, we extract the data (in JSON format)
      // and update our posts state variable with the data.
      if (res.status === 200) {
        const data = await res.json();
        setPosts(data);
      }
    } catch (e) {
      // If the HTTP response fails, it will throw an exception.
      // We catch it, and update the state variable to let the user know something went wrong.
      setError(true);
    }
  };

  // ***TODO: Call handleLoad() as soon as the component renders.***

  // Component contents. Note the JavaScript logic injected in curly braces {}
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="md:container mx-auto">
        <div className="text-2xl text-center my-4">Simple Social App</div>
        {/* Link to the New Post page. Using Tailwind.css, we make the Link look like a button. */}
        <Link
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded float-right"
          href="/new"
        >
          New Post
        </Link>

        {/* ***TODO: Map through every post fetched from the database (instead of just one).*** */}
        {posts[0] ? (
          <>
            {/* HTML for a single post */}
            <div className="bg-stone-700 w-[50rem] mx-auto p-4 mb-4 rounded">
              <div className="text-white text-xl font-bold mb-4">
                <h2 className="text-white text-2xl font-bold">
                  {" "}
                  "{posts[0].title}" by {posts[0].author}
                </h2>
              </div>
              <p className="text-white">{posts[0].body}</p>
            </div>
            <p className="text-center font-bold">
              (Additional posts not yet rendered)
            </p>
          </>
        ) : (
          <p className="text-center">No posts yet!</p>
        )}
        {error && <h1 className="text-red-100">An error occurred.</h1>}
      </main>
    </>
  );
}
